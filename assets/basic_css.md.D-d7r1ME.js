import{_ as i,c as s,o as a,a2 as l}from"./chunks/framework.Bx6qu0xe.js";const g=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"basic/css.md","filePath":"basic/css.md","lastUpdated":1710402794000}'),e={name:"basic/css.md"},n=l(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="css-盒模型" tabindex="-1">CSS 盒模型 <a class="header-anchor" href="#css-盒模型" aria-label="Permalink to &quot;CSS 盒模型&quot;">​</a></h2><ul><li><p>W3C 标准盒模型：属性 width、height 只包含内容 content，不包含 border 和 padding。<br><code>width/height = content</code></p></li><li><p>IE 盒模型：属性 width、height 包含 content、border 和 padding，指的是 content + padding + border。<br><code>width/height = content + padding + border</code></p></li><li><p>通过修改元素的 <code>box-sizing</code> 属性来改变元素的盒模型。</p></li></ul><h2 id="css-选择符" tabindex="-1">CSS 选择符 <a class="header-anchor" href="#css-选择符" aria-label="Permalink to &quot;CSS 选择符&quot;">​</a></h2><ul><li>id 选择器（#myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div, h1 ~ h6, p）</li><li>后代选择器（h1 p）</li><li>相邻后代选择器（子）选择器（ul &gt; li）</li><li>兄弟选择器（li ~ a）</li><li>相邻兄弟选择器（li + a）</li><li>属性选择器（a[rel=&quot;external&quot;]）</li><li>伪类选择器（a:hover，li:nth-child）</li><li>伪元素选择器（a::before，a::after）</li><li>通配符选择器（*）</li></ul><h2 id="css-中的属性继承" tabindex="-1">CSS 中的属性继承 <a class="header-anchor" href="#css-中的属性继承" aria-label="Permalink to &quot;CSS 中的属性继承&quot;">​</a></h2><ul><li><p>每一个属性在定义中都给出了这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用父元素的同属性的值来作为自己的值。</p></li><li><p>一般具有继承性的属性有：字体相关的属性 <code>font-size</code> 和 <code>font-weight</code> 等、文本相关的属性 <code>color</code> 和 <code>text-align</code> 等、表格的一些布局属性、列表属性如 <code>list-style</code> 等、还有光标属性 <code>cursor</code>、元素可见性 <code>visibility</code>。</p></li><li><p>当一个属性不是继承属性的时候，我们也可以通过将它的值设置为 <code>inherit</code> 来使它从父元素那获取同名的属性值来继承。</p></li></ul><h2 id="css-优先级算法" tabindex="-1">CSS 优先级算法 <a class="header-anchor" href="#css-优先级算法" aria-label="Permalink to &quot;CSS 优先级算法&quot;">​</a></h2><ul><li>标签内选择符 <code>x 0 0 0</code>（1000）</li><li>ID 选择符 <code>0 x 0 0</code>（100）</li><li>class 选择符/属性选择符/伪类选择符 <code>0 0 x 0</code>（10）</li><li>元素和伪元素选择符 <code>0 0 0 x</code>（1）</li></ul><h2 id="css3-新增的伪类" tabindex="-1">CSS3 新增的伪类 <a class="header-anchor" href="#css3-新增的伪类" aria-label="Permalink to &quot;CSS3 新增的伪类&quot;">​</a></h2><ul><li><p><code>elem:nth-child(n)</code> 选中父元素下的第 <code>n</code> 个子元素。</p></li><li><p><code>elem:nth-last-child(n)</code> 从后开始查找，选中父元素下的第 <code>n</code> 个子元素。</p></li><li><p><code>elem:last-child</code> 选中最后一个子元素。</p></li><li><p><code>elem:only-child</code> 如果 <code>elem</code> 是父元素下唯一的子元素，则选中之。</p></li><li><p><code>elem:nth-of-type(n)</code> 选中父元素下第 <code>n</code> 个 <code>elem</code> 类型元素。</p></li><li><p><code>elem:first-of-type</code> 选中父元素下第一个 <code>elem</code> 类型元素。</p></li><li><p><code>elem:last-of-type</code> 选中父元素下最后一个 <code>elem</code> 类型元素。</p></li><li><p><code>elem:only-of-type</code> 如果父元素下的子元素只有一个 <code>elem</code> 类型元素，则选中该元素。</p></li><li><p><code>elem:empty</code> 选中不包含子元素和内容的 <code>elem</code> 类型元素。</p></li><li><p><code>elem:target</code> 选择当前活动的 <code>elem</code> 元素。</p></li><li><p><code>:not(elem)</code>选择非 <code>elem</code> 元素的每个元素。</p></li><li><p><code>:enabled</code> 控制表单控件的禁用状态。</p></li><li><p><code>:disabled</code> 控制表单控件的禁用状态。</p></li><li><p><code>:checked</code> 单选框或复选框被选中。</p></li></ul><h2 id="display-有哪些值" tabindex="-1">display 有哪些值 <a class="header-anchor" href="#display-有哪些值" aria-label="Permalink to &quot;display 有哪些值&quot;">​</a></h2><ul><li><code>block</code> 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</li><li><code>none</code> 元素不显示，并从文档流中移除。</li><li><code>inline</code> 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。</li><li><code>inline-block</code> 默认宽度为内容宽度，可以设置宽高，同行显示。</li><li><code>list-item</code> 像块类型元素一样显示，并添加样式列表标记。</li><li><code>table</code> 此元素会作为块级表格来显示。</li><li><code>inherit</code> 规定应该从父元素继承 <code>display</code> 属性的值。</li></ul><h2 id="css3-新特性" tabindex="-1">CSS3 新特性 <a class="header-anchor" href="#css3-新特性" aria-label="Permalink to &quot;CSS3 新特性&quot;">​</a></h2><ul><li>新增各种 CSS 选择器。（<code>:not(.input)</code> 所有 <code>class</code> 不是 <code>input</code> 的节点）。</li><li>圆角（<code>border-radius: 50%;</code>）。</li><li>多列布局（<code>multi-columnlayout</code>）。</li><li>阴影和反射（<code>shadow</code>、<code>reflect</code>）。</li><li>文字特效（<code>text-shadow</code>）。</li><li>文字渲染（<code>text-decoration</code>）。</li><li>线性渐变（<code>gradient</code>）。</li><li>旋转（<code>transform</code>）。</li><li>缩放、定位、倾斜、动画、多背景。</li></ul><h2 id="css3-的-弹性布局" tabindex="-1">CSS3 的 弹性布局 <a class="header-anchor" href="#css3-的-弹性布局" aria-label="Permalink to &quot;CSS3 的 弹性布局&quot;">​</a></h2><p>flex 是 FlexibleBox 的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性。</p><ul><li><p>采用 flex 布局的元素，称为 flex 容器（flexcontainer），简称“容器”。它的所有子元素自动成为容器成员，称为 flex 项（flexitem），简称“项目”。</p></li><li><p>容器默认存在两根轴：水平的主轴（mainaxis）和垂直的交叉轴（crossaxis），项目默认沿主轴排列。</p></li><li><p>以下 6 个属性设置在“容器”上。</p><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）。</p><p><code>flex-wrap</code> 属性定义，如果一条轴线排不下，如何换行。</p><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>rownowrap</code>。</p><p><code>justify-content</code> 属性定义了项目在主轴上的对齐方式。</p><p><code>align-items</code> 属性定义项目在交叉轴上如何对齐。</p><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p></li><li><p>以下 6 个属性设置在“项目”上。</p><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 <code>0</code>。</p><p><code>flex-grow</code> 属性定义项目的放大比例，默认为 <code>0</code>，即如果存在剩余空间，也不放大。</p><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为 <code>1</code>，即如果空间不足，该项目将缩小。</p><p><code>flex-basis</code> 属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code>，即项的本来大小。</p><p><code>flex</code> 属性是 <code>flex-grow</code>，<code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code>。</p><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code>。</p></li></ul><h2 id="图片-base64-编码的优缺点" tabindex="-1">图片 base64 编码的优缺点 <a class="header-anchor" href="#图片-base64-编码的优缺点" aria-label="Permalink to &quot;图片 base64 编码的优缺点&quot;">​</a></h2><ul><li><p>base64 编码是一种图片处理格式，通过特定的算法将图片编码成一长串字符串，在页面上显示的时候，可以用该字符串来代替图片的 url 属性。</p></li><li><p>使用 base64 的优点：减少一个图片的 HTTP 请求。</p></li><li><p>使用 base64 的缺点：</p><ul><li><p>根据 base64 的编码原理，编码后的大小会比原文件大 1/3，如果把大图片编码到 HTML 或 CSS 中，不仅会造成文件体积的增加，影响文件的加载速度，还会增加浏览器对 HTML 或 CSS 文件解析渲染的时间。</p></li><li><p>使用 base64 无法直接缓存，要缓存只能缓存包含 base64 的文件，比如 HTML 或 CSS，这相比域直接缓存图片的效果要差很多。</p></li><li><p>兼容性的问题，IE8 以前的浏览器不支持。</p></li></ul></li><li><p>一般一些网站的小图标可以使用 base64 图片来引入。</p></li></ul><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><ul><li><p>BFC（Block Formatting Context）指的是块级格式化上下文，一个元素形成了 BFC 之后，那么它内部元素产生的布局不会影响到外部元素，外部元素的布局也不会影响到 BFC 中的内部元素。一个 BFC 就像是一个隔离区域，和其他区域互不影响。</p></li><li><p>创建 BFC</p><ol><li>根元素或包含根元素的元素。</li><li>浮动元素 float ＝ left | right 或 inherit（≠none）。</li><li>绝对定位元素 position ＝ absolute 或 fixed。</li><li>display ＝ inline-block | flex | inline-flex | table-cell 或 table-caption。</li><li>overflow ＝ hidden | auto 或 scroll(≠visible)。</li></ol></li></ul><h2 id="ifc" tabindex="-1">IFC <a class="header-anchor" href="#ifc" aria-label="Permalink to &quot;IFC&quot;">​</a></h2><ul><li>IFC 指的是行级格式化上下文。</li><li>行级上下文内部的盒子会在水平方向，一个接一个地放置。</li><li>当一行不够的时候会自动切换到下一行。</li><li>行级上下文的高度由内部最高的内联盒子的高度决定。</li></ul><h2 id="元素水平和垂直居中" tabindex="-1">元素水平和垂直居中 <a class="header-anchor" href="#元素水平和垂直居中" aria-label="Permalink to &quot;元素水平和垂直居中&quot;">​</a></h2><h3 id="flexbox-布局" tabindex="-1">Flexbox 布局 <a class="header-anchor" href="#flexbox-布局" aria-label="Permalink to &quot;Flexbox 布局&quot;">​</a></h3><ul><li><p>父容器使用 Flexbox 布局实现子元素的水平和垂直居中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现垂直居中 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现水平居中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>结合 Flexbox 和 margin: auto; 属性实现水平和垂直居中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 同时实现水平和垂直居中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="grid-布局" tabindex="-1">Grid 布局 <a class="header-anchor" href="#grid-布局" aria-label="Permalink to &quot;Grid 布局&quot;">​</a></h3><p>父容器使用 Grid 布局实现子元素的水平和垂直居中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  place-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 同时实现水平和垂直居中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="table-属性" tabindex="-1">Table 属性 <a class="header-anchor" href="#table-属性" aria-label="Permalink to &quot;Table 属性&quot;">​</a></h3><p>使用 Table 属性实现水平和垂直居中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">table-cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  vertical-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现垂直居中 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现水平居中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="子绝父相" tabindex="-1">子绝父相 <a class="header-anchor" href="#子绝父相" aria-label="Permalink to &quot;子绝父相&quot;">​</a></h3><p>子绝父相表示：子元素设置绝对定位，父容器设置相对定位。</p><h4 id="不知道子元素和父容器的高度" tabindex="-1">不知道子元素和父容器的高度 <a class="header-anchor" href="#不知道子元素和父容器的高度" aria-label="Permalink to &quot;不知道子元素和父容器的高度&quot;">​</a></h4><p>使用 position 和 transform 属性可以同时实现水平和垂直居中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现垂直居中 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现水平居中 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="知道子元素和父容器的高度" tabindex="-1">知道子元素和父容器的高度 <a class="header-anchor" href="#知道子元素和父容器的高度" aria-label="Permalink to &quot;知道子元素和父容器的高度&quot;">​</a></h4><p>使用 position 和 margin 属性同时实现水平和垂直居中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 同时实现水平和垂直居中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="line-height" tabindex="-1">line-height <a class="header-anchor" href="#line-height" aria-label="Permalink to &quot;line-height&quot;">​</a></h3><p>如果子元素是单行文本，可以使用 line-height 来实现垂直居中，这个方法适用于只包含单行文本的元素。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现水平居中 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 实现垂直居中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="为什么需要清除浮动" tabindex="-1">为什么需要清除浮动 <a class="header-anchor" href="#为什么需要清除浮动" aria-label="Permalink to &quot;为什么需要清除浮动&quot;">​</a></h2><ul><li><p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。</p></li><li><p>浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。</p></li><li><p>清除浮动是为了清除使用浮动元素产生的影响，浮动的元素，高度会塌陷，使页面后面的布局不能正常显示。</p></li><li><p>清除浮动的方式：</p><ul><li>使用 clear 属性清除浮动。</li><li>使用 BFC（块级格式化）上下文来清除浮动。</li></ul></li><li><p>使用伪元素的方式清除浮动</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clear::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="css-性能优化" tabindex="-1">CSS 性能优化 <a class="header-anchor" href="#css-性能优化" aria-label="Permalink to &quot;CSS 性能优化&quot;">​</a></h2><ul><li><p>合并和压缩文件</p><ul><li>将多个 CSS 文件合并为一个，减少 HTTP 请求次数。</li><li>使用压缩工具（例如 UglifyCSS、cssnano 等）来压缩 CSS 文件，减小文件大小。</li></ul></li><li><p>使用字体图标或 SVG</p><ul><li>替代大量小图像的图标使用字体图标或 SVG 图像，以减少 HTTP 请求。</li></ul></li><li><p>精简选择器</p><ul><li>避免使用过于复杂的选择器，因为它们可能导致性能下降，简单的选择器通常更有效。</li></ul></li><li><p>避免使用 !important</p><ul><li>避免使用 <code>!important</code> 规则，以防止样式覆盖的混乱。</li></ul></li><li><p>减少使用嵌套</p><ul><li>减少嵌套层级，因为深层次的嵌套可能会增加渲染时间。</li></ul></li><li><p>优化图片</p><ul><li>使用合适大小的图片，不要使用比实际需要更大的图像。</li><li>使用 CSS Sprites 来减少多个小图标的请求（合并图片）。</li></ul></li><li><p>启用浏览器缓存</p><ul><li>设置适当的缓存头，以确保浏览器能够缓存 CSS 文件，减少后续加载时的请求。</li></ul></li><li><p>使用缩写</p><ul><li>使用缩写属性，例如 <code>margin</code>、<code>padding</code> 等，以减小 CSS 文件大小。</li></ul></li><li><p>使用 CSS 动画和过渡</p><ul><li>尽量使用 CSS 动画和过渡，而不是 JavaScript 动画，以利用浏览器的硬件加速功能。</li></ul></li><li><p>异步加载 CSS</p><ul><li>将不同页面或组件的 CSS 文件拆分为不同的文件，并根据需要异步加载，以避免不必要的资源加载。</li></ul></li><li><p>使用字体子集</p><ul><li>如果使用自定义字体，考虑仅包含实际需要的字符，以减小字体文件大小。</li></ul></li><li><p>减少重绘和回流</p><ul><li>避免频繁的样式更改，以减少页面的重绘和回流。</li></ul></li><li><p>使用 Flexbox 和 Grid</p><ul><li>使用 Flexbox 和 Grid 布局代替传统的布局方法，它们通常更有效。</li></ul></li><li><p>优化移动端样式</p><ul><li>使用媒体查询和适应性布局，确保网站在移动设备上有良好的性能和用户体验。</li></ul></li></ul><p>性能优化是一个综合的过程，需要结合具体项目的特点和需求来制定相应的优化策略。</p><h2 id="常见的元素隐藏方式" tabindex="-1">常见的元素隐藏方式 <a class="header-anchor" href="#常见的元素隐藏方式" aria-label="Permalink to &quot;常见的元素隐藏方式&quot;">​</a></h2><ul><li><p>使用 <code>display: none;</code> 隐藏元素，渲染树不会包含该渲染对象，该元素不会在页面中占据位置，也不会响应绑定的监听事件。</p></li><li><p>使用 <code>visibility: hidden;</code> 隐藏元素，元素在页面中仍占据空间，不会响应绑定的监听事件。</p></li><li><p>使用 <code>opacity: 0;</code> 将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。</p></li><li><p>通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</p></li><li><p>通过 <code>z-index</code> 负值，来使其他元素遮盖住该元素，以此来实现隐藏。</p></li><li><p>通过 <code>clip/clip-path</code> 元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</p></li><li><p>通过 <code>transform:scale(0,0);</code> 来将元素缩放为 0，以此来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</p></li></ul>`,51),h=[n];function p(t,k,d,c,o,r){return a(),s("div",null,h)}const y=i(e,[["render",p]]);export{g as __pageData,y as default};
