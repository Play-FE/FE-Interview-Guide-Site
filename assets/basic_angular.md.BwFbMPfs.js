import{_ as a,c as s,o as i,a2 as l}from"./chunks/framework.Bx6qu0xe.js";const u=JSON.parse('{"title":"Angular","description":"","frontmatter":{},"headers":[],"relativePath":"basic/angular.md","filePath":"basic/angular.md","lastUpdated":1710774822000}'),n={name:"basic/angular.md"},t=l(`<h1 id="angular" tabindex="-1">Angular <a class="header-anchor" href="#angular" aria-label="Permalink to &quot;Angular&quot;">​</a></h1><h2 id="什么是-angular-框架" tabindex="-1">什么是 Angular 框架 <a class="header-anchor" href="#什么是-angular-框架" aria-label="Permalink to &quot;什么是 Angular 框架&quot;">​</a></h2><p>Angular 是一款由 Google 开发和维护的<strong>开源前端 JavaScript 框架</strong>，用于构建<strong>单页面应用程序 (SPA)</strong>。它提供了一套全面的工具和功能，可帮助开发人员提高开发效率、构建健壮且可扩展的应用程序。</p><p>Angular 的主要特点：</p><ul><li><strong>组件化：</strong> Angular 的核心概念是组件，这是一种自包含的视图和逻辑单元。每个组件可以有自己的 HTML 模板、CSS 样式和 TypeScript 类。</li><li><strong>模块化：</strong> Angular 使用模块来组织应用的不同部分，包括组件、指令、管道和其他依赖项。</li><li><strong>双向数据绑定：</strong> Angular 通过其强大的数据绑定机制实现了模型与视图之间的自动同步。</li><li><strong>依赖注入：</strong> Angular 采用依赖注入模式来管理服务和组件间的依赖关系，使得代码更易于测试和复用。</li><li><strong>指令系统：</strong> Angular 允许开发者创建自定义指令来扩展 HTML 元素的功能。</li><li><strong>路由与导航：</strong> 内置的路由器支持多视图和深层链接，提供了丰富的导航功能。</li><li><strong>响应式编程：</strong> Angular 利用 RxJS 库支持响应式编程范式，简化异步处理。</li><li><strong>测试：</strong> 框架提供丰富的测试工具，方便进行单元测试和端到端测试。</li></ul><p>Angular 与其他主流前端框架 (如 React、Vue) 相比，具有以下特点：</p><ul><li><p><strong>优势：</strong></p><ul><li><strong>完整性：</strong> Angular 是一套完整的框架，包含构建 SPA 所需的所有功能。</li><li><strong>可扩展性：</strong> Angular 具有良好的架构设计，支持大型应用程序的开发。</li><li><strong>跨平台能力：</strong> Angular 不仅适用于浏览器环境，还可以借助 Angular Universal 实现服务器端渲染，以及通过 Angular Mobile Toolkit 开发原生移动应用。</li><li><strong>类型安全：</strong> 基于 TypeScript 构建，提供静态类型检查，提高代码质量和可维护性。</li><li><strong>工具链支持：</strong> Angular CLI 为开发者提供了命令行工具，方便项目的初始化、构建、测试和部署。</li><li><strong>测试友好：</strong> Angular 的设计鼓励测试驱动开发，内置了对单元测试和端到端测试的支持。</li><li><strong>社区活跃：</strong> 拥有庞大的开发者社区和丰富的第三方库，便于获取帮助和集成其他技术栈。</li></ul></li><li><p><strong>劣势：</strong></p><ul><li><strong>学习曲线：</strong> Angular 的学习曲线相对陡峭，需要一定的时间和精力进行学习。</li><li><strong>灵活性：</strong> Angular 的灵活性相对较弱，对开发人员的编码风格有一定的限制。</li><li><strong>体积：</strong> Angular 框架的体积相对较大，可能会影响应用程序的加载速度。</li></ul></li></ul><p>与其他框架的比较：</p><table><thead><tr><th>框架</th><th>特点</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Angular</td><td>完整、可扩展、性能好</td><td>社区庞大、学习资源丰富</td><td>学习曲线陡峭、灵活性弱、体积大</td></tr><tr><td>React</td><td>轻量、灵活、社区活跃</td><td>易于学习、开发速度快</td><td>需要搭配其他库构建完整应用</td></tr><tr><td>Vue</td><td>轻量、易学、易用</td><td>体积小、上手快</td><td>社区相对较小、功能相对较弱</td></tr></tbody></table><h2 id="双向数据绑定" tabindex="-1">双向数据绑定 <a class="header-anchor" href="#双向数据绑定" aria-label="Permalink to &quot;双向数据绑定&quot;">​</a></h2><p>在 Angular 中，双向数据绑定是指视图（HTML 页面）和组件（Controller 或 ViewModel）之间的数据同步机制，即当数据模型改变时，视图会自动更新，同时当视图中的数据改变时，数据模型也会同步更新。这意味着数据的变化会在模型和视图之间双向传播。</p><p>实现双向数据绑定的基本思想是使用了 Angular 的脏检查机制和事件监听器。当数据模型发生变化时，Angular 框架会检测到这种变化，并通知相关的视图更新。反之亦然，当用户在视图中输入数据时，Angular 会检测到这些变化，并更新相关的数据模型。</p><p>双向数据绑定的实现步骤如下：</p><ol><li><p><strong>建立数据模型：</strong> 在组件中定义数据模型，例如使用 TypeScript 类来表示数据结构，并将其初始化为视图的初始值。</p></li><li><p><strong>在视图中绑定数据：</strong> 在 HTML 模板中使用 Angular 提供的双向数据绑定语法，例如使用 <code>[(ngModel)]</code> 指令将数据模型和视图中的表单元素绑定起来。这样，表单元素的值变化会自动更新到数据模型中，同时数据模型的变化也会自动反映到表单元素上。</p></li><li><p><strong>响应数据变化：</strong> 当数据模型发生变化时，Angular 框架会自动检测到这些变化，并通知相关的视图更新。这样，视图中与数据模型绑定的部分会随之更新，保持与数据模型的同步。</p></li><li><p><strong>处理用户输入：</strong> 当用户在视图中输入数据时，例如在表单元素中输入文本或选择选项，Angular 框架会监听这些事件，并在用户输入时更新数据模型。这样，数据模型会随着用户的输入实时更新，保持与视图的同步。</p></li></ol><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><p>在 Angular 中，组件（Component）是构建用户界面的基本构建块。组件由模板、类和元数据组成。</p><ol><li><p><strong>模板（Template）：</strong> 模板是组件的视图，它定义了用户界面的结构和布局，以及显示在屏幕上的内容。模板通常采用 HTML 格式，并结合 Angular 的模板语法来添加动态数据绑定、结构指令和属性指令等功能。模板中可以包含 HTML 标签、Angular 指令、组件绑定和事件绑定等内容。</p><p>例如，一个简单的组件模板可能如下所示：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 组件模板示例 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ title }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>类（Class）：</strong> 类是组件的控制器，它包含了组件的业务逻辑和数据。类通常使用 TypeScript 编写，并通过装饰器（Decorator）来与 Angular 框架进行关联。在类中，可以定义属性、方法和生命周期钩子，用于处理数据、响应用户操作以及与服务进行交互等。</p><p>例如，一个简单的组件类可能如下所示：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件类示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Component } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@angular/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  selector: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app-root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  templateUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./app.component.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  styleUrls: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./app.component.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;My Angular App&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Welcome to Angular!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>元数据（Metadata）：</strong> 元数据是装饰器中的配置信息，用于告诉 Angular 如何处理组件。元数据通常包含在 <code>@Component</code> 装饰器中，其中包括组件的选择器（selector）、模板（template）、样式表（styles）、依赖注入的服务（providers）等信息。元数据告诉 Angular 如何将组件类与其模板和其它相关信息联系起来。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  selector: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app-root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  templateUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./app.component.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  styleUrls: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./app.component.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ol><p>组件是 Angular 应用程序的核心构建单元，通过组合模板、类和元数据，开发者可以构建出丰富、交互性强的用户界面，并通过模块化和复用来管理应用程序的复杂性。</p><h2 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h2><p>在 Angular 中，指令（Directives）是一种特殊的 HTML 标记，用于扩展 HTML 元素的行为或外观。指令允许你在 HTML 中添加自定义行为，使其能够与组件的逻辑进行交互，从而实现更加丰富和灵活的用户界面。</p><p>Angular 中的指令有两种主要类型：</p><ol><li><p><strong>结构型指令（Structural Directives）：</strong> 结构型指令通过修改 DOM 的布局来改变视图的结构。常见的结构型指令包括 <code>*ngIf</code>、<code>*ngFor</code> 等。例如，<code>*ngIf</code> 根据条件来添加或移除 DOM 元素，<code>*ngFor</code> 根据数据集合来动态生成重复元素。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *ngIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isLoggedIn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    欢迎回来！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *ngFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;let item of items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>属性型指令（Attribute Directives）：</strong> 属性型指令用于修改现有元素的外观或行为。这些指令以属性的形式应用于 HTML 元素。Angular 内置了一些常用的属性型指令，比如 <code>ngModel</code>、<code>ngStyle</code>、<code>ngClass</code> 等。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [(ngModel)]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [ngStyle]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ &#39;color&#39;: textColor, &#39;font-size&#39;: fontSize }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;样式指令示例&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [ngClass]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ &#39;bold&#39;: isBold, &#39;italic&#39;: isItalic }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;类指令示例&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ol><h2 id="服务" tabindex="-1">服务 <a class="header-anchor" href="#服务" aria-label="Permalink to &quot;服务&quot;">​</a></h2><p>在 Angular 中，服务（Service）是一种特殊的类，用于封装可重用的业务逻辑或数据处理功能，并在应用程序的不同部分之间共享这些功能。服务可以在组件中注入，并通过依赖注入（Dependency Injection）的方式在整个应用程序中共享和重用。</p><p>服务的作用包括但不限于：</p><ol><li><p><strong>数据共享和通信：</strong> 服务可以用于在不同组件之间共享数据或通信。通过服务，组件可以在彼此之间传递数据，实现父子组件之间的通信或非直接关联组件之间的通信。</p></li><li><p><strong>业务逻辑封装：</strong> 服务通常用于封装应用程序的业务逻辑。将业务逻辑封装在服务中可以提高代码的可重用性和可维护性，并使得代码更易于测试。</p></li><li><p><strong>HTTP 请求：</strong> Angular 中的 HTTP 客户端模块允许开发人员发送 HTTP 请求以与服务器通信。服务通常用于封装 HTTP 请求逻辑，并在需要时在组件中注入使用。</p></li><li><p><strong>数据持久化：</strong> 服务可以用于管理数据的持久化，比如从本地存储或服务器获取数据，并在需要时提供给组件。</p></li><li><p><strong>单一职责原则：</strong> 使用服务可以遵循单一职责原则，即每个服务负责一项具体的任务或功能，使得代码更加清晰和易于维护。</p></li><li><p><strong>模块化和可测试性：</strong> 将功能封装在服务中可以使得代码更加模块化，使得应用程序更易于扩展和维护。此外，由于服务通常是可注入的，因此组件可以通过依赖注入轻松地替换服务的实现，从而使得测试变得更加容易。</p></li></ol><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><p>在 Angular 中，模块（Module）是用于组织应用程序代码的基本构建单元。Angular 应用程序由一个或多个模块组成，每个模块负责定义一组相关的组件、指令、服务和管道，并将它们组织在一起以构建一个功能完整的应用程序。</p><p>模块的作用包括但不限于：</p><ol><li><p><strong>代码组织：</strong> 模块将应用程序中的各个部分组织成逻辑单元，使得应用程序的结构更清晰和易于理解。</p></li><li><p><strong>模块化开发：</strong> 模块化开发是一种良好的软件开发实践，可以将大型应用程序分解为更小、更易管理的模块。每个模块负责一组相关的功能，使得代码更易于扩展、维护和测试。</p></li><li><p><strong>依赖管理：</strong> Angular 中的模块系统允许开发人员将应用程序的依赖项明确地声明在模块中。这样，Angular 框架就可以根据模块之间的依赖关系来加载和初始化应用程序中的各个部分。</p></li><li><p><strong>提供依赖注入树：</strong> 每个 Angular 模块都有自己的依赖注入树，用于管理模块中的服务和其他依赖项。模块可以通过 providers 数组来注册服务，从而使服务可以在模块中的组件中进行注入和使用。</p></li><li><p><strong>配置路由和根模块：</strong> 在 Angular 应用程序中，通常会有一个根模块（AppModule），它负责配置应用程序的路由、加载顶级组件，并初始化应用程序的其他模块。此外，Angular 的路由器也是基于模块的，开发人员可以在模块中定义路由配置，以实现不同模块之间的页面导航。</p></li></ol><h2 id="解释-angular-中的依赖注入是什么-以及它的优势是什么" tabindex="-1">解释 Angular 中的依赖注入是什么，以及它的优势是什么？ <a class="header-anchor" href="#解释-angular-中的依赖注入是什么-以及它的优势是什么" aria-label="Permalink to &quot;解释 Angular 中的依赖注入是什么，以及它的优势是什么？&quot;">​</a></h2><h2 id="什么是-angular-中的路由器-如何在-angular-中实现路由导航" tabindex="-1">什么是 Angular 中的路由器？如何在 Angular 中实现路由导航？ <a class="header-anchor" href="#什么是-angular-中的路由器-如何在-angular-中实现路由导航" aria-label="Permalink to &quot;什么是 Angular 中的路由器？如何在 Angular 中实现路由导航？&quot;">​</a></h2><h2 id="请解释-angular-中的管道是什么-以及它们的作用是什么" tabindex="-1">请解释 Angular 中的管道是什么，以及它们的作用是什么？ <a class="header-anchor" href="#请解释-angular-中的管道是什么-以及它们的作用是什么" aria-label="Permalink to &quot;请解释 Angular 中的管道是什么，以及它们的作用是什么？&quot;">​</a></h2><h2 id="什么是-angular-中的模板引擎-它是如何工作的" tabindex="-1">什么是 Angular 中的模板引擎？它是如何工作的？ <a class="header-anchor" href="#什么是-angular-中的模板引擎-它是如何工作的" aria-label="Permalink to &quot;什么是 Angular 中的模板引擎？它是如何工作的？&quot;">​</a></h2><h2 id="解释-angular-中的-http-客户端模块的作用-并说明如何使用它来进行-http-请求。" tabindex="-1">解释 Angular 中的 HTTP 客户端模块的作用，并说明如何使用它来进行 HTTP 请求。 <a class="header-anchor" href="#解释-angular-中的-http-客户端模块的作用-并说明如何使用它来进行-http-请求。" aria-label="Permalink to &quot;解释 Angular 中的 HTTP 客户端模块的作用，并说明如何使用它来进行 HTTP 请求。&quot;">​</a></h2><h2 id="请解释-angular-中的生命周期钩子是什么-以及它们各自的用途是什么" tabindex="-1">请解释 Angular 中的生命周期钩子是什么，以及它们各自的用途是什么？ <a class="header-anchor" href="#请解释-angular-中的生命周期钩子是什么-以及它们各自的用途是什么" aria-label="Permalink to &quot;请解释 Angular 中的生命周期钩子是什么，以及它们各自的用途是什么？&quot;">​</a></h2><h2 id="什么是-angular-中的表单-它们有哪些类型" tabindex="-1">什么是 Angular 中的表单？它们有哪些类型？ <a class="header-anchor" href="#什么是-angular-中的表单-它们有哪些类型" aria-label="Permalink to &quot;什么是 Angular 中的表单？它们有哪些类型？&quot;">​</a></h2><h2 id="请解释-angular-中的响应式表单和模板驱动表单的区别。" tabindex="-1">请解释 Angular 中的响应式表单和模板驱动表单的区别。 <a class="header-anchor" href="#请解释-angular-中的响应式表单和模板驱动表单的区别。" aria-label="Permalink to &quot;请解释 Angular 中的响应式表单和模板驱动表单的区别。&quot;">​</a></h2><h2 id="什么是-angular-cli-它的作用是什么-如何使用它来创建-angular-项目" tabindex="-1">什么是 Angular CLI？它的作用是什么？如何使用它来创建 Angular 项目？ <a class="header-anchor" href="#什么是-angular-cli-它的作用是什么-如何使用它来创建-angular-项目" aria-label="Permalink to &quot;什么是 Angular CLI？它的作用是什么？如何使用它来创建 Angular 项目？&quot;">​</a></h2><h2 id="解释-angular-中的组件通讯是如何实现的。" tabindex="-1">解释 Angular 中的组件通讯是如何实现的。 <a class="header-anchor" href="#解释-angular-中的组件通讯是如何实现的。" aria-label="Permalink to &quot;解释 Angular 中的组件通讯是如何实现的。&quot;">​</a></h2><h2 id="请解释-angular-中的单向数据流是什么意思。" tabindex="-1">请解释 Angular 中的单向数据流是什么意思。 <a class="header-anchor" href="#请解释-angular-中的单向数据流是什么意思。" aria-label="Permalink to &quot;请解释 Angular 中的单向数据流是什么意思。&quot;">​</a></h2><h2 id="什么是-angular-中的动态组件-如何创建和使用它们" tabindex="-1">什么是 Angular 中的动态组件？如何创建和使用它们？ <a class="header-anchor" href="#什么是-angular-中的动态组件-如何创建和使用它们" aria-label="Permalink to &quot;什么是 Angular 中的动态组件？如何创建和使用它们？&quot;">​</a></h2><h2 id="请解释-angular-中的-zone-js-的作用是什么" tabindex="-1">请解释 Angular 中的 Zone.js 的作用是什么？ <a class="header-anchor" href="#请解释-angular-中的-zone-js-的作用是什么" aria-label="Permalink to &quot;请解释 Angular 中的 Zone.js 的作用是什么？&quot;">​</a></h2><h2 id="什么是-angular-中的国际化-i18n-如何在-angular-应用中实现国际化" tabindex="-1">什么是 Angular 中的国际化（i18n）？如何在 Angular 应用中实现国际化？ <a class="header-anchor" href="#什么是-angular-中的国际化-i18n-如何在-angular-应用中实现国际化" aria-label="Permalink to &quot;什么是 Angular 中的国际化（i18n）？如何在 Angular 应用中实现国际化？&quot;">​</a></h2>`,44),r=[t];function h(e,p,g,k,o,d){return i(),s("div",null,r)}const c=a(n,[["render",h]]);export{u as __pageData,c as default};
