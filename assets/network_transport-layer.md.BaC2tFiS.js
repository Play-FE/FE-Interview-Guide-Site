import{_ as l,c as i,o as t,a2 as r}from"./chunks/framework.CQ12TVIp.js";const c=JSON.parse('{"title":"传输层（Transport Layer）","description":"","frontmatter":{},"headers":[],"relativePath":"network/transport-layer.md","filePath":"network/transport-layer.md","lastUpdated":1711527929000}'),o={name:"network/transport-layer.md"},a=r('<h1 id="传输层-transport-layer" tabindex="-1">传输层（Transport Layer） <a class="header-anchor" href="#传输层-transport-layer" aria-label="Permalink to &quot;传输层（Transport Layer）&quot;">​</a></h1><p>传输层负责在网络中的通信节点之间提供端到端的数据传输服务，包括了数据的可靠传输、流量控制和拥塞控制等功能。</p><h2 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h2><p>TCP（传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层协议。它是 TCP/IP 协议族中最重要的协议之一，用于在网络上可靠地传输数据。</p><p>以下是 TCP 协议的主要特点和工作原理：</p><ol><li><p><strong>面向连接</strong>：</p><ul><li>TCP 是一种面向连接的协议，通信双方在通信之前需要先建立连接，然后在连接上进行数据传输，传输完成后再释放连接。</li></ul></li><li><p><strong>可靠性</strong>：</p><ul><li>TCP 提供可靠的数据传输服务，通过序号、确认和重传机制来确保数据的可靠性。</li><li>发送方将每个发送的数据包标记上序号，并等待接收方发送确认响应。如果发送方未收到确认响应，将会重新发送数据包。</li></ul></li><li><p><strong>流量控制</strong>：</p><ul><li>TCP 使用流量控制机制来避免发送方发送过多数据导致接收方无法处理的情况。</li><li>接收方可以通过 TCP 报文中的窗口大小来告知发送方自己的接收能力，发送方根据接收方的窗口大小调整发送速率。</li></ul></li><li><p><strong>拥塞控制</strong>：</p><ul><li>TCP 使用拥塞控制机制来避免网络拥塞，保证网络的稳定性和公平性。</li><li>TCP 发送方通过监测网络拥塞情况，动态调整自己的发送速率，以避免造成网络拥塞。</li></ul></li><li><p><strong>字节流传输</strong>：</p><ul><li>TCP 使用字节流传输模式，将数据视为连续的字节流而不是消息或数据包的集合。</li><li>TCP 在发送端将数据划分为合适大小的数据块，然后在接收端重新组装成完整的数据流。</li></ul></li><li><p><strong>三次握手和四次挥手</strong>：</p><ul><li>TCP 在建立和释放连接时采用三次握手和四次挥手的握手协议。</li><li>三次握手用于建立连接，四次挥手用于释放连接。</li></ul></li></ol><h2 id="udp" tabindex="-1">UDP <a class="header-anchor" href="#udp" aria-label="Permalink to &quot;UDP&quot;">​</a></h2><p>UDP（用户数据报协议）是一种无连接的、不可靠的传输层协议，用于在网络上以简单、高效的方式传输数据。UDP 与 TCP（传输控制协议）相比，更加轻量级，适用于一些对实时性要求较高且容忍少量数据丢失的应用场景，如语音通话、视频直播等。</p><p>以下是 UDP 协议的一些特点和工作原理：</p><ol><li><p><strong>无连接</strong>：</p><ul><li>UDP 是一种无连接的协议，通信的双方在发送和接收数据之前不需要建立连接。这意味着 UDP 不维护连接状态，也不保证数据的可靠性和顺序性。</li></ul></li><li><p><strong>不可靠性</strong>：</p><ul><li>UDP 不提供数据可靠性保证，数据传输过程中可能会丢失、重复或者乱序。因为 UDP 不涉及确认、重传等复杂的机制，所以它更加轻量级，传输效率更高。</li></ul></li><li><p><strong>简单性</strong>：</p><ul><li>UDP 协议设计简单，头部开销小，适合用于传输对实时性要求较高的数据，如实时视频、音频等。</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>UDP 适用于一些对实时性要求高、丢失少量数据可以接受的应用场景，如在线游戏、语音通话、视频直播等。在这些场景下，UDP 可以提供更低的延迟和更快的传输速度。</li></ul></li><li><p><strong>无拥塞控制</strong>：</p><ul><li>UDP 没有拥塞控制机制，因此在网络拥塞时可能会出现丢包现象。对于 UDP 来说，网络的拥塞控制是由应用程序自行处理的。</li></ul></li></ol><p>尽管 UDP 具有以上特点，但在某些应用场景下，UDP 的特性是有价值的。例如，在需要快速传输数据且对数据的实时性要求较高的场景下，UDP 可以提供更好的性能。但需要注意的是，由于 UDP 不保证数据的可靠性，因此在使用 UDP 时，应用程序需要自行处理数据的丢失和重传等问题。</p><h2 id="tcp-和-udp-的区别" tabindex="-1">TCP 和 UDP 的区别 <a class="header-anchor" href="#tcp-和-udp-的区别" aria-label="Permalink to &quot;TCP 和 UDP 的区别&quot;">​</a></h2><p>TCP（传输控制协议）和 UDP（用户数据报协议）是两种互联网协议，它们在数据传输时有几个重要的区别：</p><ol><li><p><strong>连接性</strong>：</p><ul><li>TCP：提供面向连接的通信，通信双方在传输数据前需要建立连接，通过三次握手协议建立连接，然后进行数据传输，传输完成后释放连接。</li><li>UDP：是面向无连接的通信，通信双方在传输数据前不需要建立连接，直接将数据发送到目标地址，接收方收到数据后立即进行处理。</li></ul></li><li><p><strong>可靠性</strong>：</p><ul><li>TCP：提供可靠的数据传输，通过序列号、确认和重传机制来确保数据的可靠性，保证数据按顺序到达且不丢失。</li><li>UDP：不保证数据的可靠性，发送的数据可能丢失、重复或者乱序到达，因为 UDP 没有重传机制、确认机制和流量控制。</li></ul></li><li><p><strong>数据传输方式</strong>：</p><ul><li>TCP：提供字节流服务，将数据分割成 TCP 报文段进行传输，保证数据的完整性和顺序性，在接收端重新组装成完整的数据。</li><li>UDP：将数据封装成 UDP 数据包进行传输，每个数据包独立处理，没有数据分割和重组，可以实现低延迟的数据传输。</li></ul></li><li><p><strong>流量控制和拥塞控制</strong>：</p><ul><li>TCP：提供流量控制和拥塞控制机制，通过滑动窗口和拥塞避免算法来调整发送和接收数据的速率，防止网络拥塞。</li><li>UDP：不提供流量控制和拥塞控制，发送端的数据发送速率可能超过接收端的处理能力，容易导致网络拥塞和数据丢失。</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>TCP：适用于要求数据传输可靠性和有序性的应用，如文件传输、电子邮件、网页浏览等。</li><li>UDP：适用于对数据传输实时性要求较高，可以容忍一定的数据丢失的应用，如实时音视频传输、在线游戏、DNS 查询等。</li></ul></li></ol>',14),p=[a];function n(s,e,P,u,g,T){return t(),i("div",null,p)}const d=l(o,[["render",n]]);export{c as __pageData,d as default};
