import{_ as e,c as o,o as t,a2 as i}from"./chunks/framework.DukRYrIy.js";const h=JSON.parse('{"title":"Node.js","description":"","frontmatter":{},"headers":[],"relativePath":"after-end/nodejs.md","filePath":"after-end/nodejs.md","lastUpdated":1710941707000}'),a={name:"after-end/nodejs.md"},l=i('<h1 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.js&quot;">​</a></h1><h2 id="require-模块引入的查找方式" tabindex="-1">require 模块引入的查找方式？ <a class="header-anchor" href="#require-模块引入的查找方式" aria-label="Permalink to &quot;require 模块引入的查找方式？&quot;">​</a></h2><p>当 Node 遇到 require(X) 时，按下面的顺序处理。</p><ul><li><p>如果 X 是内置模块（比如 require(&#39;http&#39;)）。</p><ol><li>返回该模块。</li><li>不再继续执行。</li></ol></li><li><p>如果 X 以 &quot;./&quot; 或者 &quot;/&quot; 或者 &quot;../&quot; 开头。</p><ol><li>根据 X 所在的父模块，确定 X 的绝对路径。</li><li>将 X 当成文件，依次查找 <code>X、X.js、X.json、X.node</code> 这些文件，只要其中有一个存在，就返回该文件，不再继续执行。</li><li>将 X 当成目录，依次查找 <code>X/package.json（main 字段）、X/index.js、X/index.json、X/index.node</code>这些文件，只要其中有一个存在，就返回该文件，不再继续执行。</li></ol></li><li><p>如果 X 不带路径。</p><ol><li>根据 X 所在的父模块，确定 X 可能的安装目录。</li><li>依次在每个目录中，将 X 当成文件名或目录名加载。</li></ol></li><li><p>抛出 <code>not found</code>。</p></li></ul>',4),d=[l];function n(r,s,c,_,p,u){return t(),o("div",null,d)}const q=e(a,[["render",n]]);export{h as __pageData,q as default};
